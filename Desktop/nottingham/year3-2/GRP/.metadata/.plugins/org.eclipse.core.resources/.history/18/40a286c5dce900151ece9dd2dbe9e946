import javax.swing.*;  
import java.awt.*;  
import java.awt.event.*;  
import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;  

public class UI extends JFrame implements ActionListener {  
	ChessBoard board = null;
	Container con = null;
    MakeChessManual record = null; 
    AI ai;
    JMenuBar bar;  
    JMenu fileMenu;  
    JMenuItem NewChess, SaveChess, Exit;  
    JFileChooser fileChooser = null;  
    ArrayList<MoveStep> gameChess = null;  
    JButton  button2, button3, button4;
    public UI() {  
        bar = new JMenuBar();  
        fileMenu = new JMenu("Chinese Chess Game");  
        NewChess = new JMenuItem("NewChess");   
        Exit = new JMenuItem("Exit");  
        fileMenu.add(NewChess);  
        fileMenu.add(Exit);  
        bar.add(fileMenu);  
        setJMenuBar(bar);  
        setTitle(NewChess.getText());  
        NewChess.addActionListener(this);  
        Exit.addActionListener(this);  
        board = new ChessBoard(45, 45, 9, 10);  
        record = board.record;  
        JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true,board, record); 
        split.setDividerSize(5);  
        split.setDividerLocation(460);  
        con = getContentPane();
        con.add(split, BorderLayout.CENTER);
        addWindowListener(new WindowAdapter() {  
            public void windowClosing(WindowEvent e) {  
                System.exit(0);  
            }  
        }); 
        
        JPanel p2 = new JPanel();
        p2.setLayout(new GridLayout(1, 5));
        button2 = new JButton("Check");
        button2.addActionListener(this);
        button3 = new JButton("Search");
        button3.addActionListener(this);
        button4 = new JButton("Undo");
        button4.addActionListener(this);
        p2.add(button2);
        p2.add(button3);
        p2.add(button4);
        con.add(p2, BorderLayout.SOUTH);
        
        setVisible(true);  
        setBounds(60, 20, 800, 600);  
        fileChooser = new JFileChooser();  
        con.validate();  
        validate();  
    }  
  
    public void actionPerformed(ActionEvent e) {  
        if (e.getSource() == NewChess) {  
            con.removeAll();  
            NewChess.setEnabled(true);  
            this.setTitle(NewChess.getText());  
            board = new ChessBoard(45, 45, 9, 10);  
            record = board.record;  
            JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, board, record);  
            split.setDividerSize(5);  
            split.setDividerLocation(460);  
            JPanel p2 = new JPanel();
            p2.setLayout(new GridLayout(1, 5));
            button2 = new JButton("Check");
            button2.addActionListener(this);
            button3 = new JButton("Search");
            button3.addActionListener(this);
            button4 = new JButton("Undo");
            p2.add(button2);
            p2.add(button3);
            p2.add(button4);
            con.add(p2, BorderLayout.SOUTH);
            con.add(split, BorderLayout.CENTER);  
            validate();  
        }  
        if (e.getSource() == Exit) {  
          System.exit(0);
        }  
        if(e.getSource() == button2){
        	String str = "Check piece: Piece: Red 兵 \n" + "1. from H8 to H5\n" + "2. from H8 to D8\n" + "3. from H8 to B8\n";
        	//String str = null;
        	record.text.append(str);
        }
        if(e.getSource() == button3){
        	String str = null;
        	int isWin = ai.computerMove();
    		System.out.println("computer: " + (ai.getComputerMove().from) + "  " + (ai.getComputerMove().dest ));
        	System.out.println(ai.getMoveString());
        	
        	//String str = "Search result:\n" + "1. Piece: Red 兵   from G7 to F7\n" + "2. Piece: Red 馬   from J8 to H7\n" + "3. Piece: Red 炮   from H8 to H5\n";
        	record.text.append(str);
        }
        if(e.getSource() == button4){
        	if(record.gameChess.isEmpty()){
        		JOptionPane.showMessageDialog(null, "Empty record,cannot use undo.", "alert", JOptionPane.ERROR_MESSAGE); 
        	}else{
        	int size = record.gameChess.size();
        	System.out.println(size);
        	ChessPoint pStart = record.gameChess.get(size-1).pStart;
        	ChessPoint pEnd = record.gameChess.get(size-1).pEnd;
        	ChessPiece move = record.gameChess.get(size-1).move;
        	ChessPiece end = record.gameChess.get(size-1).eaten;
        	board = board.getChessBoard();
        	pEnd.reMovePiece(move, board);
        	pEnd.setPiece(end, board);
        	pStart.setPiece(move, board);
        	record.gameChess.remove(size-1);
        	record.text.append("Successfully undo");
        	}
        }
    }  
  
    public static void main(String args[]) {  
       UI n = new UI();  
    }  
}  