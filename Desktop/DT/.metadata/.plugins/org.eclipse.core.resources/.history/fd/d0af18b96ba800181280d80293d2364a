
public class FourY {

	FourY(){
		
	}
	
	public boolean isNoMatchFourY(Board board, Candy[][] candies) {
		for (int row = 0; row < board.BOARDSIZE; row = row+1){ 
			for (int column = 0; column < board.BOARDSIZE; column = column+1){
				if(isMatchFourY(board, candies, candies[row][column])){
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean isMatchFourY(Board board, Candy[][] candies, Candy candy){
		if (candy == null || candy.getcolour() == -10) return false;
		int i = candy.getRow();
		int j = candy.getColumn();
		if(i>=1 && i <  board.BOARDSIZE -2 && candies[i-1][j] != null && candies[i+1][j] != null && candies[i+2][j] != null
				&& candies[i-1][j].getcolour() != -10 && candies[i+1][j].getcolour() != -10 && candies[i+2][j].getcolour() != -10){// case inner down
			if (candy.getcolour() != -10 && candy.getcolour() == candies[i-1][j].getcolour() && candy.getcolour() == candies[i+1][j].getcolour() && candy.getcolour() == candies[i+2][j].getcolour())
				return true;
		}
		if(i>=2 && i < board.BOARDSIZE -1 && candies[i-1][j] != null && candies[i+1][j] != null && candies[i-2][j] != null
				&& candies[i-1][j].getcolour() != -10 && candies[i+1][j].getcolour() != -10 && candies[i-2][j].getcolour() != -10){// case inner up
			if (candy.getcolour() != -10 && candy.getcolour() == candies[i-1][j].getcolour() && candy.getcolour() == candies[i+1][j].getcolour() && candy.getcolour() == candies[i-2][j].getcolour())
				return true;
		}

		return false;
	}
	
	public void disappearFourY(Board board, Candy[][] candies, Candy candy){
		if (candy == null || candy.getcolour() == -10) return;
		int i = candy.getRow();
		int j = candy.getColumn();
		if(i >= 1 && i < board.BOARDSIZE -2 && candies[i-1][j] != null && candies[i+1][j] != null && candies[i+2][j] != null
				&& candies[i-1][j].getcolour() != -10 && candies[i+1][j].getcolour() != -10 && candies[i+2][j].getcolour() != -10){
			if (candy.getcolour() == candies[i-1][j].getcolour() && candy.getcolour() == candies[i+1][j].getcolour() && candy.getcolour() == candies[i+2][j].getcolour()){
				int savedcolour = candy.getcolour();
				System.out.println(candy.getcolour()+"      " + candy.getRow()+"         " + candy.getColumn());
				if (candy != null && candy.getcolour() != -10) candy.crush();
				Candy newcandy = new YCandy(savedcolour, board, i, j); 
				board.getCandies()[i][j] = newcandy;
				if (candies[i+1][j] != null && candies[i+1][j].getcolour() != -10) candies[i+1][j].crush();
				if (candies[i+2][j] != null && candies[i+2][j].getcolour() != -10) candies[i+2][j].crush();
				if (candies[i-1][j] != null && candies[i-1][j].getcolour() != -10) candies[i-1][j].crush();
			}
		}
		if(i >= 2 && i < board.BOARDSIZE -1 && candies[i-1][j] != null && candies[i+1][j] != null && candies[i-2][j] != null
				&& candies[i-1][j].getcolour() != -10 && candies[i+1][j].getcolour() != -10 && candies[i-2][j].getcolour() != -10){
			if (candy.getcolour() == candies[i-1][j].getcolour() && candy.getcolour() == candies[i+1][j].getcolour() && candy.getcolour() == candies[i-2][j].getcolour()){
				int savedcolour = candy.getcolour();
				if (candy != null) candy.crush();
				Candy newcandy = new YCandy(savedcolour, board, i, j); 
				board.getCandies()[i][j] = newcandy;
				if (candies[i+1][j] != null && candies[i+1][j].getcolour() != -10) candies[i+1][j].crush();
				if (candies[i-2][j] != null) candies[i-2][j].crush();
				if (candies[i-1][j] != null) candies[i-1][j].crush();
			}
		}
	}
}
