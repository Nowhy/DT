
public class simpleAI2 {
	private Game game;
	private Board board;
	Board tempBoard;
	Board testBoard;
	int tempScore;
	int tempI = -1;
	int tempJ = -1;
	
	int tempM = -1;
	int tempN = -1;
	int repeatScore = 0;
	int repeatChocolate = 0;
	int repeatFive = 0;
	int repeatFour = 0;
	
	
	simpleAI2(Game game){
		this.game = game;
	}
	
	// NewObject<i, j, m, n, board, score>
	public void play() {
		board = game.getBoard();
		int score = board.getScore();
		int tempScore = score;
		tempBoard = new Board(board);
		tempI = -1;
		tempJ = -1;
		tempM = -1;
		tempN = -1;
		int stepNUM = board.STEP;
		if(game.STRATEGY == 1) {
			ScoreFirstHeuristic(stepNUM);
		}
		
		
//		System.out.println(game.getBoard().getScore() + "   " + tempI + "   " + tempJ + "   " + tempM + "   " +tempN);
		// no valid move
		if(tempI == -1 && tempJ == -1) {
			for(int i = 0; i < board.BOARDSIZE; i++) {
				for(int j = 0; j < board.BOARDSIZE; j++) {
					if(board.getCandies()[i][j] != null && board.getCandies()[i][j].getcolour() != -10) {
						board.getCandies()[i][j] = null;
					}
				}
			}
			while(!board.isNONullCandy()) {
				board.addRandomCandy(board.METHOD);
				board.checkChainReaction(0);
			}
//			System.out.println("repaint....");
			play();
		}else {
			game.getBoard().setSelectedFirst();
			game.getBoard().setFirstCandy(tempM, tempN);
			game.getBoard().move(tempI, tempJ);
//			game.getBoard().printBoard();
//			game.reDrawBoard();
			
		}

	}
	
	public void update(int a, int b, int c, int d) {
		tempScore = testBoard.getScore();
		tempBoard = new Board(testBoard);
		setTempI(a);
		setTempJ(b);
		setTempM(c);
		setTempN(d);
	}

	public void ScoreFirstHeuristic(int stepNUM) {
		
		if(j != 0) {
			testBoard = new Board(tempBoard);
			testBoard.setFirstCandy(i, j);
			testBoard.setSelectedFirst();
			testBoard.move(i,j-1);
			
			repeatForTwenty(i,j,i,j-1);
			if(getRepeatScore() > tempBoard.getScore()) {
				update(i,j,i,j-1);
			}else if(getRepeatScore() == tempBoard.getScore()) {
				if(getRepeatChocolate() > tempBoard.getChocolateNUM()) {
					update(i,j,i,j-1);
				}else if(getRepeatChocolate() == tempBoard.getChocolateNUM()) {
					if(getRepeatFive() > tempBoard.getFiveNUM()) {
						update(i,j,i,j-1);
					}else if(getRepeatFive() == tempBoard.getFiveNUM()) {
						if(getRepeatFour() > (tempBoard.getFourXNUM() + tempBoard.getFourYNUM())) {
							update(i,j,i,j-1);
						}
					}
				}
			}
			
		}
		
		
		if(i != 0) {
			testBoard = new Board(tempBoard);
			testBoard.setFirstCandy(i, j);
			testBoard.setSelectedFirst();
			testBoard.move(i-1,j);
			repeatForTwenty(i,j,i-1,j);
			if(getRepeatScore() > tempBoard.getScore()) {
				update(i,j,i-1,j);
			}else if(getRepeatScore() == tempBoard.getScore()) {
				if(getRepeatChocolate() > tempBoard.getChocolateNUM()) {
					update(i,j,i-1,j);
				}else if(getRepeatChocolate() == tempBoard.getChocolateNUM()) {
					if(getRepeatFive() > tempBoard.getFiveNUM()) {
						update(i,j,i-1,j);
					}else if(getRepeatFive() == tempBoard.getFiveNUM()) {
						if(getRepeatFour() > (tempBoard.getFourXNUM() + tempBoard.getFourYNUM())) {
							update(i,j,i-1,j);
						}
					}
				}
			}
		}
		
	}

	
	public void repeatForTwenty(int tempI, int tempJ, int tempM, int tempN) {
		setRepeatScore(0);
		setRepeatChocolate(0);
		setRepeatFive(0);
		setRepeatFour(0);
		for(int i = 0; i < 20; i++) {
			testBoard = null;
			testBoard = new Board(board);
			testBoard.setFirstCandy(tempI, tempJ);
			testBoard.setSelectedFirst();
			testBoard.move(tempM, tempN);
			repeatScore = getRepeatScore() + testBoard.getScore();
			repeatChocolate = getRepeatChocolate() + testBoard.getChocolateNUM();
			repeatFive = getRepeatFive() + testBoard.getFiveNUM();
			repeatFour = getRepeatFour() + testBoard.getFourXNUM() + testBoard.getFourYNUM();
		}
		setRepeatScore(getRepeatScore()/20);
		setRepeatChocolate(getRepeatChocolate()/20);
		setRepeatFive(getRepeatFive()/20);
		setRepeatFour(getRepeatFour()/20);
		
	}
	
	
	void setTempI(int i) {
		tempI = i;
	}
	
	void setTempJ(int i) {
		tempJ = i;
	}
	
	void setTempM(int i) {
		tempM = i;
	}
	
	void setTempN(int i) {
		tempN = i;
	}
	
	int getTempI() {
		return tempI;
	}
	
	int getTempJ() {
		return tempJ;
	}
	
	int getTempM() {
		return tempM;
	}
	
	int getTempN() {
		return tempN;
	}
	
	
	void setRepeatScore(int i) {
		repeatScore = i;
	}
	
	void setRepeatChocolate(int i) {
		repeatChocolate = i;
	}
	
	void setRepeatFive(int i) {
		repeatFive = i;
	}
	
	void setRepeatFour(int i) {
		repeatFour = i;
	}
	
	int getRepeatScore() {
		return repeatScore;
	}
	
	int getRepeatChocolate() {
		return repeatChocolate;
	}
	
	int getRepeatFive() {
		return repeatFive;
	}
	
	int getRepeatFour() {
		return repeatFour;
	}
	
}
