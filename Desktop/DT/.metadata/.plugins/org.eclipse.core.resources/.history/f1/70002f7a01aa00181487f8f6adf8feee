import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import javax.swing.*;
import javax.swing.border.EmptyBorder;


public class Game extends JFrame implements ActionListener, MouseListener {
	
	private Board board;
	int i = 0;
	private GUI gui;
	private JPanel northPanel;
	private JLabel scoreLabel, targetLabel, limitStep;
	public int STRATEGY;
	public int LEVEL;
	public long startTime;
	public long endTime;
	public long running;
	
	Game(int STRATEGY, int LEVEL, int Player) throws IOException {
		
		super("Match Three Game"); 
		this.STRATEGY = STRATEGY;
		this.LEVEL = LEVEL;
		if(Player == 0) {
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
			this.setResizable(false);
			this.getContentPane().setLayout(new BorderLayout());	
		}
		this.board = new Board(this, LEVEL, Player);
		this.getBoard().checkChainReaction(0);
		if(!this.getBoard().isNONullCandy()) {
			this.getBoard().addRandomCandy();
			this.getBoard().checkChainReaction(0);
		}
		while(!this.getBoard().checkValidMoves()) {
			for(int i = 0; i < this.getBoard().BOARDSIZE; i++) {
				for(int j = 0; j < this.getBoard().BOARDSIZE; j++) {
					if(this.getBoard().getCandies()[i][j] != null && this.getBoard().getCandies()[i][j].getcolour() != -10 && this.getBoard().getCandies()[i][j] instanceof RegularCandy) {
						this.getBoard().getCandies()[i][j] = null;
					}
				}
			}
			while(!this.getBoard().isNONullCandy()) {
				this.getBoard().addRandomCandy();
				this.getBoard().checkChainReaction(0);
			}
		}
		this.getBoard().resetScore();
		
		this.gui = new GUI(this, board);
		if(Player == 0) {
			this.gui.setBorder(new EmptyBorder(10,10,10,10)); 
			
			scoreLabel = new JLabel("Score: "+ this.getBoard().getScore());
			scoreLabel.setBorder(new EmptyBorder(3, 3, 3, 30));
			scoreLabel.setFont(new Font("New Times Roman", Font.BOLD, 20));
			scoreLabel.setOpaque(true);
			
			targetLabel = new JLabel("Target: "+ this.getBoard().TARGET);
			targetLabel.setBorder(new EmptyBorder(3, 30, 3, 3));
			targetLabel.setFont(new Font("New Times Roman", Font.BOLD, 20));
			targetLabel.setOpaque(true);
			
			limitStep = new JLabel("Step: "+ this.getBoard().STEP);
			limitStep.setBorder(new EmptyBorder(3, 30, 3, 3));
			limitStep.setFont(new Font("New Times Roman", Font.BOLD, 20));
			limitStep.setOpaque(true);
			
			northPanel = new JPanel();
			northPanel.add(scoreLabel);
			northPanel.add(targetLabel);
			northPanel.add(limitStep);
			northPanel.setBorder(new EmptyBorder(10,10,10,10)); 
			this.getContentPane().add(northPanel,BorderLayout.NORTH);
			
			this.getContentPane().add(gui, BorderLayout.CENTER); 
			this.addMouseListener(this);
			this.setSize(1000,700); 
			this.setVisible(true);
		}
		startTime = System.currentTimeMillis(); 
		writeFile("LEVEL "+ LEVEL + " START!" + "\r\nTIME: "+ startTime+"\r\n");
	}
	
	
	public void writeFile(String str) {
		try {
			FileWriter writer = new FileWriter("log.txt", true);   
            writer.write(str);   
            writer.close();   
 
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	public GUI getBoardGui(){ //getters
		return this.gui;
	}
	
	public Board getBoard(){
		return this.board;
	}
	
	public void updateBoard(Board b){
		this.board = b;
	}
	
	public void reDrawBoard(){
//		this.upateStep(this.getBoard().STEP-1);
//		while(!this.getBoard().checkValidMoves()) {
//			for(int i = 0; i < this.getBoard().BOARDSIZE; i++) {
//				for(int j = 0; j < board.BOARDSIZE; j++) {
//					if(this.getBoard().getCandies()[i][j] != null && board.getCandies()[i][j].getcolour() != -10) {
//						board.getCandies()[i][j] = null;
//					}
//				}
//			}
//			while(!board.isNONullCandy()) {
//				board.addRandomCandy(board.METHOD);
//				board.checkChainReaction(0);
//			}
//			reDrawBoard();
//			this.upateStep(this.getBoard().STEP+1);
//		}
		
		int score = board.getScore();
		this.getContentPane().remove(gui);
		this.getContentPane().remove(northPanel);
		this.gui = new GUI(this,board);
		this.gui.setBorder(new EmptyBorder(10,10,10,10)); 
		scoreLabel = new JLabel("Score: "+ score);
		scoreLabel.setBorder(new EmptyBorder(3, 3, 3, 30));
		scoreLabel.setFont(new Font("New Times Roman", Font.BOLD, 20));
		scoreLabel.setOpaque(true);
		
		targetLabel = new JLabel("Target: "+ this.getBoard().TARGET);
		targetLabel.setBorder(new EmptyBorder(3, 30, 3, 3));
		targetLabel.setFont(new Font("New Times Roman", Font.BOLD, 20));
		targetLabel.setOpaque(true);
		
		limitStep = new JLabel("Step: "+ this.getBoard().STEP);
		limitStep.setBorder(new EmptyBorder(3, 30, 3, 3));
		limitStep.setFont(new Font("New Times Roman", Font.BOLD, 20));
		limitStep.setOpaque(true);
		
		northPanel = new JPanel();
		northPanel.add(scoreLabel);
		northPanel.add(targetLabel);
		northPanel.add(limitStep);
		northPanel.setBorder(new EmptyBorder(10,10,10,10)); 
		this.getContentPane().add(northPanel,BorderLayout.NORTH);
		this.getContentPane().add(gui,BorderLayout.CENTER);
		this.setVisible(true);
		this.repaint();
		
		
		if( this.getBoard().STEP  == 0 && this.getBoard().getScore() <  this.getBoard().TARGET) {
			endTime = System.currentTimeMillis(); 
			running = (endTime-startTime)/1000;
			int result = JOptionPane.showConfirmDialog(null, "Sorry! You Lose the Game. Your Score is " + this.getBoard().getScore() +". And time you spent is " + running +" s\n"+ " Would you like to continue this level?", "YES", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE); 
			if(result != JOptionPane.OK_OPTION){
			    System.exit(0);
			}else {
				try {
					writeFile("LEVEL "+ LEVEL + " FINISH!" + "\r\nTIME: "+ endTime + "\r\n");
					writeFile("Score "+ this.getBoard().getScore() + " " + "    RUNNING TIME: "+ running+" s\r\n\r\n");
					this.dispose();
					new Game(STRATEGY, LEVEL, 0);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		if(this.getBoard().getScore() >= this.getBoard().TARGET && this.getBoard().STEP == 0) {
			endTime = System.currentTimeMillis(); 
			running = (endTime-startTime)/1000;
			int result = JOptionPane.showConfirmDialog(null, "Congratulations! Your Score is " + this.getBoard().getScore() +". And time you spent is "+running+" s\n"+ "Continue the next Level " + (LEVEL+2) + "?" , "YES", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE); 
			if(result != JOptionPane.OK_OPTION){
			    System.exit(0);
			}else {
				try {
						writeFile("LEVEL "+ LEVEL + " FINISH!" + "\r\nTIME: "+ endTime + "\r\n");
						writeFile("Score "+ this.getBoard().getScore() + " " + "    RUNNING TIME: "+ running+" s\r\n\r\n");
						LEVEL = LEVEL+1;
						this.dispose();
						new Game(STRATEGY, LEVEL, 0);
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
		}
	}
	
	public void actionPerformed(ActionEvent e) {
		
			for (int i = 0; i < this.getBoard().BOARDSIZE; i = i+1){ //one of boardGui buttons was pressed
				for (int j = 0; j < this.getBoard().BOARDSIZE; j = j+1){
					if (e.getSource() == this.gui.getButtons()[i][j]){
						board.move(i,j);
						return;
					}
				}
			}
	}
	
	@Override
	public void mouseClicked(MouseEvent arg0) {
		i = i+1;
		System.out.println("click      " + i);
		board.printBoard();
		this.repaint();
		this.gui.repaint();		
		
	}
	@Override
	public void mouseEntered(MouseEvent arg0) {
		
	}
	@Override
	public void mouseExited(MouseEvent arg0) {
		
	}
	@Override
	public void mousePressed(MouseEvent arg0) {
		i = i+1;
		System.out.println("press      " + i);
		board.printBoard();
		this.repaint();
		this.gui.repaint();		
		
	}
	@Override
	public void mouseReleased(MouseEvent arg0) {
		i = i+1;
		System.out.println("release      " + i);
		board.printBoard();
		this.repaint();
		this.gui.repaint();		
		
	}

	public void upateStep(int j) {
		this.getBoard().STEP = j;
		
	}

}
